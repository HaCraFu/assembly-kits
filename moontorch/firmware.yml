esphome:
    name: moontorch1

external_components:
  - source:
      type: local
      path: custom_components

ota:
  platform: esphome

api:

esp32:
  board: adafruit_qtpy_esp32c3
  framework:
    type: arduino

htct62radio:
  id: radio

wifi:
  ssid: ssid
  password: password

web_server:
  port: 80

logger:
  level: DEBUG
  

esp32_ble_tracker:
  on_ble_advertise:
    then:
      - lambda: |-
          ESP_LOGD("ble_adv", "New BLE device");
          ESP_LOGD("ble_adv", "  address: %s", x.address_str().c_str());
          ESP_LOGD("ble_adv", "  name: %s", x.get_name().c_str());
          ESP_LOGD("ble_adv", "  Advertised service UUIDs:");
          for (auto uuid : x.get_service_uuids()) {
              ESP_LOGD("ble_adv", "    - %s", uuid.to_string().c_str());
          }
          ESP_LOGD("ble_adv", "  Advertised service data:");
          for (auto data : x.get_service_datas()) {
              ESP_LOGD("ble_adv", "    - %s: (length %i)", data.uuid.to_string().c_str(), data.data.size());
          }
          ESP_LOGD("ble_adv", "  Advertised manufacturer data:");
          for (auto data : x.get_manufacturer_datas()) {
              ESP_LOGD("ble_adv", "    - %s: (length %i)", data.uuid.to_string().c_str(), data.data.size());
          }

interval:
  - interval: 10s
    then:
      - light.turn_off: light1
      - light.turn_off: light2
      - lambda: |-
          static constexpr auto minLat = static_cast<uint32_t>(52.53084314728766 * 1e4);
          static constexpr auto minLon = static_cast<uint32_t>(13.808012008666994 * 1e4);
          auto lat_ = static_cast<uint32_t>(id(lat).get_state()* 1e4);
          auto lon_ = static_cast<uint32_t>(id(lon).get_state()* 1e4);
          auto dlat = static_cast<uint32_t>(lat_ - minLat);
          auto dlon = static_cast<uint32_t>(lon_ - minLon);
          auto bat = static_cast<uint8_t>(id(battery)->get_state());

          id(radio)->transmit_packet({
            static_cast<uint8_t>((dlat >> 0) & 0xFF),
            static_cast<uint8_t>((dlat >> 8) & 0xFF),
            static_cast<uint8_t>((dlon >> 0) & 0xFF),
            static_cast<uint8_t>((dlon >> 8) & 0xFF),
            bat,
            1
            });

      - light.turn_on: light1
      - light.turn_on: light2
output:
  - platform: moonled
    pin: 
      number: GPIO6
      inverted: true
      mode:
        output: true
        open_drain: true
    id: led1
    frequency: 100000Hz
    # max_power: 10%
  - platform: moonled
    pin:
      number: GPIO7
      inverted: true
      mode:
        output: true
        open_drain: true
      # allow_other_uses: true
    id: led2
    frequency: 100000Hz
    # max_power: 10%

binary_sensor:
  - platform: gpio
    pin: 
      number: GPIO1
      mode:
        input: true
        pullup: true
      inverted: true
    filters:
      - delayed_on: 30ms
    name: "Torch Button"
    on_press:
      then:
        - light.turn_on: light1
        - light.turn_on: light2
    on_release:
      then:
        - light.turn_off: light1
        - light.turn_off: light2

sensor:
  - platform: adc
    pin: GPIO0
    attenuation: 12db
    update_interval: 60s
    device_class: battery
    unit_of_measurement: "%"
    name: "Battery Level"
    id: battery
    filters:
      - calibrate_linear:
          - 1.75 -> 0.0
          - 1.85 -> 12
          - 1.9 -> 40
          - 2 -> 78
          - 2.1 -> 100

light:
  - platform: monochromatic
    id: light1
    output: led1
    name: "Led White"
    default_transition_length: 0s
    restore_mode: RESTORE_DEFAULT_OFF
  - platform: monochromatic
    id: light2
    output: led2
    name: "Led Red"
    default_transition_length: 0s
    restore_mode: RESTORE_DEFAULT_OFF

uart:
  rx_pin: GPIO20
  tx_pin: GPIO21
  baud_rate: 9600

gps:
  update_interval: 4s
  latitude:
    name: "Latitude"
    id: lat
  longitude:
    name: "Longitude"
    id: lon

time:
  - platform: gps
