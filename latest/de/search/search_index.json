{"config":{"lang":["de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Beschreibung","text":"<p>Unicorn S</p> <p></p> <p>Bau(m)satz</p> <p></p> <p>Bau(m)satz</p> <p></p> <p>Unicorn</p>"},{"location":"#programmierung","title":"Programmierung","text":"<p>Bau(m)satz und Unicorn lassen sich selbst programmieren. Unter Windows musst du zun\u00e4chst diese Schritte durchf\u00fchren.</p> <p>Lade dir dann unsere Quelldateien herunter und entpacke sie.</p> <p>Du kannst jetzt vorhandene Beispielprogramme ausprobieren oder eigene Programme entwickeln.</p>"},{"location":"KitBaumsatz/","title":"Bau(m)satz","text":"<p>Diese Platine orientiert sich gr\u00f6\u00dftenteils am Digistump. Sie enth\u00e4lt auch den Microcontroller ATtiny85 und die USB-Schaltung.</p> <p>Sie kann also auf die gleiche Weise programmiert werden.</p> <p>Zus\u00e4tzlich zum Digistump sind 6 LEDs per Charlieplexing an PB0, PB1 und PB2 angeschlossen.</p>"},{"location":"KitUnicorn/","title":"Unicorn","text":"<p>Diese Platine orientiert sich \u00e4u\u00dferlich am Regenbogen Einhorn. Die Best\u00fcckung ist allerdings gleich zum Bau(m)satz.</p> <p>Damit orientiert sich die Funktionalit\u00e4t gr\u00f6\u00dftenteils am Digistump. Sie enth\u00e4lt auch den Microcontroller ATtiny85 und die USB-Schaltung.</p> <p>Sie kann also auf die gleiche Weise programmiert werden.</p> <p>Zus\u00e4tzlich zum Digistump sind 6 LEDs per Charlieplexing an PB0, PB1 und PB2 angeschlossen.</p>"},{"location":"KitUnicornS/","title":"Unicorn S","text":"<p>Diese Platine ist praktisch baugleich zum Regenbogen Einhorn. Es wurde nur ein anderer Schalter verwendet und die Beschriftung etwas modifiziert.</p> <p>Dieser wundersch\u00f6ne bunte Bausatz stammt vom Binary Kitchen e.V..</p> <p>Es ist sehr einfach zu L\u00f6ten: Nur 4 bunte LEDs, der Batteriehalter und der Schalter.</p>"},{"location":"ProgExamples/","title":"Programmierbeispiele","text":""},{"location":"ProgExamples/#download","title":"Download","text":"<p>Um vorhandene Beispielprogramme auf die Platine zu installieren musst du unsere Quelldateien entpackt haben. Ungef\u00e4hr so:</p>"},{"location":"ProgExamples/#offnen","title":"\u00d6ffnen","text":"<p>\u00d6ffne dann in Visual Studio Code Ordner <code>firmware</code> um die folgenden Installationsbefehle ausf\u00fchren zu k\u00f6nnen. Du darfst die Platine erst mit dem PC verbinden, wenn dich der Befehl mit dem Text</p> <pre><code>&gt; Please plug in the device (will time out in 60 seconds) ...\n</code></pre> <p>dazu auffordert. Das ganze sieht dann ungef\u00e4hr so aus:</p>"},{"location":"ProgExamples/#beispiel-arrow","title":"Beispiel Arrow","text":"<p>Auf dem Bau(m)satz zeigt dieses Programm eine kleine Pfeilanimation.</p> <p>Installieren mit dem Befehl </p> <pre><code>pio run -e arrow -t upload\n</code></pre> <p>Ver\u00e4ndern des Programms in der Datei <code>firmware/src/arrow/main.cpp</code></p>"},{"location":"ProgExamples/#beispiel-random","title":"Beispiel Random","text":"<p>L\u00e4sst zuf\u00e4llig eine der sechs LED beim Start leuchten. Keine Gew\u00e4hr f\u00fcr Gleichverteilung!</p> <p>Installieren mit dem Befehl </p> <pre><code>pio run -e random -t upload\n</code></pre> <p>Ver\u00e4ndern des Programms in der Datei <code>firmware/src/random/main.cpp</code></p>"},{"location":"ProgExamples/#beispiel-random-led","title":"Beispiel Random LED","text":"<p>Wechselt nach kurzer Pause zu einer zuf\u00e4lligen LED.</p> <p>Installieren mit dem Befehl </p> <pre><code>pio run -e random_led -t upload\n</code></pre> <p>Ver\u00e4ndern des Programms in der Datei <code>firmware/src/random_led/main.cpp</code></p>"},{"location":"ProgExamples/#beispiel-provisioning-baumsatz","title":"Beispiel Provisioning Bau(m)satz","text":"<p>Die initiale Firmware. Schaltet nacheinander alle LEDs an. Wechselt danach alle 8 Sekunden zwischen LED-Paaren weiter.</p> <p>Installieren mit dem Befehl </p> <pre><code>pio run -e provisioning_baumsatz_usb -t upload\n</code></pre> <p>Ver\u00e4ndern des Programms in der Datei <code>firmware/src/provisioning_baumsatz/main.cpp</code></p>"},{"location":"ProgExamples/#beispiel-provisioning-unicorn","title":"Beispiel Provisioning Unicorn","text":"<p>Die initiale Firmware. Schaltet nacheinander alle LEDs an. Danach folgt eine Animation.</p> <p>Installieren mit dem Befehl </p> <pre><code>pio run -e provisioning_unicorn_usb -t upload\n</code></pre> <p>Ver\u00e4ndern des Programms in der Datei <code>firmware/src/provisioning_unicorn/main.cpp</code></p>"},{"location":"ProgExamples/#beispiel-keyboard","title":"Beispiel Keyboard","text":"<p>Beispielprogramm f\u00fcr Keyboardemulation. </p> <p>Steck man die Platine in den PC, meldet sie sich als Keyboard an, welches alle 5 Sekunden <code>Frohe Weihnachten wuenscht der HaCraFu!</code> tippt. Hiermit lassen sich Anwendungen \u00e4hnlich zum Rubber Ducky entwickeln.</p> <p>Installieren mit dem Befehl </p> <pre><code>pio run -e keyboard -t upload\n</code></pre> <p>Ver\u00e4ndern des Programms in der Datei <code>firmware/src/keyboard/main.cpp</code></p>"},{"location":"ProgExamples/#beispiel-touch-dice","title":"Beispiel Touch dice","text":"<p>Beispielprogramm f\u00fcr Touch. Ber\u00fchrt man die USB-Pins mit dem feuchten Finger w\u00fcrfelt das Programm eine andere LED aus.</p> <p>Installieren mit dem Befehl </p> <pre><code>pio run -e touch_dice -t upload\n</code></pre> <p>Ver\u00e4ndern des Programms in der Datei <code>firmware/src/touch_dice/main.cpp</code></p>"},{"location":"ProgSetupLinux/","title":"Einrichtung der Programmierumgebung unter Linux","text":"<p>Installiere dir das Paket <code>platformio</code> um die Firmware kompilieren zu k\u00f6nnen.</p> <p>Als Entwicklungsumgebung bietet sich VS Code an.  Es bietet mit dem <code>platformio</code> Plugin eine gute Integration, aber jeder andere Editor tut es auch.</p> <p>Eine \u00dcbersicht zu Programmierbeispielen und wie du sie ausf\u00fchrst findest du hier.</p>"},{"location":"ProgSetupWindows/","title":"Einrichtung der Programmierumgebung unter Windows","text":""},{"location":"ProgSetupWindows/#1-installation-des-treibers","title":"1. Installation des Treibers","text":"<p>Die Programmierung unter Windows ben\u00f6tigt die Installation dieses Treibers. Hier eine kurze Videoanleitung:</p>"},{"location":"ProgSetupWindows/#2-installation-platformio","title":"2. Installation Platformio","text":"<p>Am einfachsten l\u00e4sst sich der Microcontroller mit Hilfe von Platformio unter Visual Studio Code programmieren. Hier eine kleine Videoanleitung:</p> <p>Wie im Video gezeigt, installiere bitte Visual Studio Code. In Visual Studio Code installierst du dann die Erweiterung <code>PlatformIO</code>.</p> <p>Bitte beachte dass die Installation der Erweiterung lange dauern kann und am Ende einene Neustart von VSCode erfordert.</p>"}]}